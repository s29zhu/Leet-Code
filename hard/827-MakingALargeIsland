class Solution {
    /*
    thoughts:
    
    1. segregate the island into multiple islands, different island index has different value V. Create map<V, size>
    2. iterate through grid, find 0, and its 4 directions, if the direction has V, res+=map.get(V), 
    
    [1,0,1]          [2,0,3]
    [1,0,0] ===>     [2,0,0]  ==> map 2 : 3, 3:1 => 3+1+1=5
    [1,0,0]          [2,0,0]
    
    Data structure: use a hashset to store 
    */
    public int largestIsland(int[][] grid) {
       int V = 1, res = 0; 
       int n = grid.length;
       HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
       Queue<int[]> que = new LinkedList<int[]>();
       for(int i = 0; i<n; i++){
           for(int j =0; j<n; j++){
               //discover a new island
               if(grid[i][j] == 1){
                   //get all the nodes belong to the island, get the size of it as well.
                   V++;
                   int size = 1;
                   int [] cur = {i,j};
                   que.add(cur);
                   grid[i][j]=V;
                   while(!que.isEmpty()){
                       int [] pre = que.poll();
                       
                       //left and right
                       if(pre[1]-1>=0 && grid[pre[0]][pre[1]-1] == 1 ){
                         size++;
                         grid[pre[0]][pre[1]-1] = V;
                         int[] t={pre[0],pre[1]-1};
                         que.add(t);                         
                       }
                       
                       if (pre[1]+1 < n && grid[pre[0]][pre[1]+1] == 1 ){
                         size++;
                         grid[pre[0]][pre[1]+1] =  V;
                         int[] t={pre[0],pre[1]+1};
                         que.add(t);
                       }
                       if (pre[1]+1 < n){
                       System.out.print(pre[1]+1);
                       System.out.print(grid[pre[0]][pre[1]+1]);  
                       }
               
                       //up and down                                           
                       if(pre[0]-1 >= 0&& grid[pre[0]-1][pre[1]] == 1 ){
                         size++;
                         grid[pre[0]-1][pre[1]] = V;
                         int[] t={pre[0]-1,pre[1]};
                         que.add(t);
                       } 
                       if (pre[0]+1 < n && grid[pre[0]+1][pre[1]] == 1 ){
                         size++;
                         grid[pre[0]+1][pre[1]] = V;
                         int[] t={pre[0]+1,pre[1]};
                         que.add(t);
                       }
                   }
                   map.put(V,size);
               }
           }
       }
       
        for(int i=0; i<n; i++){
           for(int j=0; j<n; j++){
               if(grid[i][j] == 0){
                   int temp=1;
                   HashSet<Integer> set = new HashSet<Integer>();
                   if(j-1>=0 && grid[i][j-1]!=0 && !set.contains(grid[i][j-1])) {
                       temp+=map.get(grid[i][j-1]);
                       set.add(grid[i][j-1]);
                   }
                   if(j+1<n && grid[i][j+1]!=0 && !set.contains(grid[i][j+1])) {
                       temp+=map.get(grid[i][j+1]);
                       set.add(grid[i][j+1]);
                   }
                   if(i-1>=0 && grid[i-1][j]!=0 && !set.contains(grid[i-1][j])){
                       temp+=map.get(grid[i-1][j]);
                       set.add(grid[i-1][j]);
                   } 
                   if(i+1<n && grid[i+1][j]!=0 && !set.contains(grid[i+1][j])){
                       temp+=map.get(grid[i+1][j]);
                       set.add(grid[i+1][j]);
                   }
                   res=Integer.max(res,temp);
               }
           }
        }

        // when there is no 0 left
        res = res==0?n*n:res;
       return res;
    }
}
