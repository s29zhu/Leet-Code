package leetcode.hard;
/*
 * In a 2D grid of 0s and 1s, we change at most one 0 to a 1.

After, what is the size of the largest island? (An island is a 4-directionally connected group of 1s).

Example 1:

Input: [[1, 0], [0, 1]]
Output: 3
Explanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.
Example 2:

Input: [[1, 1], [1, 0]]
Output: 4
Explanation: Change the 0 to 1 and make the island bigger, only one island with area = 4.
Example 3:

Input: [[1, 1], [1, 1]]
Output: 4
Explanation: Can't change any 0 to 1, only one island with area = 4.
 

Notes:

1 <= grid.length = grid[0].length <= 50.
0 <= grid[i][j] <= 1.
 */

import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Set;

public class MakingALargeIsland {
	/*
	 * intuition
	 * 1. BFS, encounter 0, expand and count the expanded area
	 * 2. A set to save all the travelled position
	 */
	public static int expand(int [][]grid, int i, int j) {
		Queue<int[]> que=new LinkedList<int[]>();
		Set<String> set=new HashSet<String>();
    	int res=1, m=grid.length, n=grid[0].length;
		int []cur= {i,j};
		que.add(cur);
		String str=String.valueOf(i)+"-"+String.valueOf(j);
		set.add(str);
		//{{1,0,0},{1,0,0},{0,1,1}};
		while(!que.isEmpty()) {
			cur=que.poll();
			int []np=new int[2];
			//left and right
			if(cur[1]>=0 && cur[1]<n-1 && grid[cur[0]][cur[1]+1]==1 ) {
				np=new int[2]; np[0]=cur[0]; np[1]=cur[1]+1;
				str=String.valueOf(np[0])+"-"+String.valueOf(np[1]);
				if(!set.contains(str)) {
					set.add(str);
					que.add(np);
					res++;
				}
			}
			if(cur[1]>0 && cur[1]<n && grid[cur[0]][cur[1]-1]==1) {
				np=new int[2]; np[0]=cur[0]; np[1]=cur[1]-1;
				str=String.valueOf(np[0])+"-"+String.valueOf(np[1]);
				if(!set.contains(str)) {
					set.add(str);
					que.add(np);
					res++;
				}
			}
			//up and down
			if(cur[0]>=0 && cur[0]<m-1 && grid[cur[0]+1][cur[1]]==1) {
				np=new int[2]; np[0]=cur[0]+1; np[1]=cur[1];
				str=String.valueOf(np[0])+"-"+String.valueOf(np[1]);
				if(!set.contains(str)) {
					set.add(str);
					que.add(np);
					res++;
				}
			}
			if(cur[0]>0 && cur[0]<m && grid[cur[0]-1][cur[1]]==1) {
				np=new int[2]; np[0]=cur[0]-1; np[1]=cur[1];
				str=String.valueOf(np[0])+"-"+String.valueOf(np[1]);
				if(!set.contains(str)) {
					set.add(str);
					que.add(np);
					res++;
				}
			}
		}
		return res;
	}

    public static int largestIsland(int[][] grid) {
    	int res=0, m=grid.length, n=grid[0].length;
    	Queue<int[]> que=new LinkedList<int[]>();
    	Set<int[]> edges=new HashSet<int[]>();
    	for(int i=0; i<m; i++) {
    		for(int j=0; j<n; j++) {
    			if(grid[i][j]==1) {
    				int p_res=1;
    				int []np= {i,j};
    				que.add(np);
                    grid[i][j]=2;
                    edges.clear();
    				while(!que.isEmpty()) {
    					int []cur=que.poll();
    					//left and right
    					if(cur[1]>=0 && cur[1]<n-1 && grid[cur[0]][cur[1]+1]==1) {
    						np=new int[2]; np[0]=cur[0]; np[1]=cur[1]+1;
    						que.add(np);
    						p_res++;
    						grid[np[0]][np[1]]=2;
    					}else if(cur[1]>=0 && cur[1]<n-1 && grid[cur[0]][cur[1]+1]==0) {
    						np=new int[2]; np[0]=cur[0]; np[1]=cur[1]+1;
    						edges.add(np);
    					}
    					if(cur[1]>0 && cur[1]<n && grid[cur[0]][cur[1]-1]==1) {
    						np=new int[2]; np[0]=cur[0]; np[1]=cur[1]-1;
    						que.add(np);
    						p_res++;
    						grid[np[0]][np[1]]=2;
    					}else if (cur[1]>0 && cur[1]<n && grid[cur[0]][cur[1]-1]==0) {
    						np=new int[2]; np[0]=cur[0]; np[1]=cur[1]-1;
    						edges.add(np);
    					}
    					//up and down
    					if(cur[0]>=0 && cur[0]<m-1 && grid[cur[0]+1][cur[1]]==1) {
    						np=new int[2]; np[0]=cur[0]+1; np[1]=cur[1];
    						que.add(np);
    						p_res++;
    						grid[np[0]][np[1]]=2;
    					}else if(cur[0]>=0 && cur[0]<m-1 && grid[cur[0]+1][cur[1]]==0) {
    						np=new int[2]; np[0]=cur[0]+1; np[1]=cur[1];
    						edges.add(np);
    					}
    					if(cur[0]>0 && cur[0]<m && grid[cur[0]-1][cur[1]]==1) {
    						np=new int[2]; np[0]=cur[0]-1; np[1]=cur[1];
    						que.add(np);
    						p_res++;
    						grid[np[0]][np[1]]=2;
    					}else if(cur[0]>0 && cur[0]<m && grid[cur[0]-1][cur[1]]==0) {
    						np=new int[2]; np[0]=cur[0]-1; np[1]=cur[1];
    						edges.add(np);
    					}
    				}
                    res=Math.max(res, p_res);
    				for(int[] position: edges) {
    					int ex_i=expand(grid, position[0], position[1]);
    					res=Math.max(res, p_res+ex_i);
    				}
    			}
    		}
    	}
        return res;
    }
    
    public static void main(String args[]) {
    	int[][]grid={{1,1,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,1,0,1,1,0,0,0,1,0,0,1,1,1,1,0,0,0,1,1,0,1,0,0,0},{1,0,0,0,1,1,0,1,1,0,0,1,0,0,0,0,1,0,1,0,1,1,0,1,0,0,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,0,0,1,1,1,1},{1,0,1,0,1,0,1,1,0,1,1,0,0,1,1,1,0,0,0,0,1,1,1,0,1,1,0,1,0,1,0,0,1,0,1,1,0,1,1,0,1,0,1,1,1,1,1,1,1},{1,1,0,0,1,1,1,0,0,0,0,0,1,0,1,1,0,1,0,0,1,0,0,1,0,1,0,0,0,1,1,1,0,0,1,1,0,1,1,0,0,0,0,1,0,1,0,1,1},{0,1,1,1,1,1,0,0,1,0,1,1,1,1,0,1,0,0,0,0,1,1,1,0,1,1,1,1,1,0,0,1,0,1,0,1,1,1,0,1,1,1,1,0,1,0,1,1,0},{0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,0,0,1,0,0,0,1,1,1,1,1,0,1,1,1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,1,0,1,1},{1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,0,1,1,0,1,0,1,1,0,0,0,1,1,0,0,1,0,1,0,0,0,0,0},{1,1,0,1,1,1,0,1,0,0,1,0,1,0,1,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,1,1,1,0,0,1,0,1,0,1,0,0,0,0,1,0,0,0,0},{1,0,1,0,0,1,1,0,1,0,0,1,1,1,0,0,0,1,1,1,0,1,0,0,0,1,1,0,1,0,1,0,0,1,0,1,1,1,0,0,1,0,1,1,0,1,1,1,1},{1,0,0,1,1,1,1,0,1,1,1,1,1,1,0,0,1,0,0,1,0,1,1,1,0,0,0,1,0,1,1,1,1,1,1,0,1,0,1,0,0,0,1,1,1,1,1,0,1},{0,0,1,1,1,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,0,0,1,1,0,1,0,1,1,0,0,1,0,0},{1,0,1,1,0,0,1,1,1,1,1,1,0,0,0,0,1,0,0,1,1,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,0,0,0,1,1,0,1,1,1,0,1,1,1},{0,0,0,1,1,1,1,0,1,1,0,0,0,1,1,1,1,0,0,1,0,0,0,1,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,0,0,0,0,0,1,1,1,1,1},{1,1,1,1,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,0,0,1,1,1,1,0,0,0,1,1,1,0,0,1,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1},{0,0,0,1,1,1,0,1,1,0,1,0,1,1,1,1,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,1,1,0,1,0,0,0,0,0,0,0},{1,0,0,0,0,0,0,0,1,0,0,1,0,1,1,0,1,1,0,0,1,1,1,0,0,0,1,1,1,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,1,1,0,0,0},{0,1,0,1,0,0,0,0,0,1,1,1,1,0,1,1,1,1,0,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,0},{1,0,0,0,0,0,0,1,0,1,0,1,0,1,1,0,1,1,1,1,0,1,1,0,0,0,1,0,1,1,0,1,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,0,1},{1,0,1,1,0,0,1,1,1,0,0,1,0,1,0,1,1,1,1,0,0,1,1,0,0,0,1,0,0,1,0,1,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,1,0},{1,1,1,1,0,1,1,0,0,0,1,0,1,1,0,1,0,0,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,1,0,0,0,1,1,0,1,0,1,0,1,1,0},{1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,0,0,1,1,0,0,1,1,0,1,1,0,0,1,0,0,0,0,1,0,1,1,0,0,0,1,1,1},{1,0,1,0,1,0,1,0,1,0,1,1,0,1,1,1,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,1,0,1,0,0,1,0,1,0,0,0,1,1,1,1,0,0},{0,0,1,1,1,0,0,1,0,1,0,1,1,1,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,1,0,1,1,0,0,1,0,1,1},{1,1,1,1,0,1,0,1,0,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,0,1,1,1,0,0,0,0,1,0,0,1,0,1,0,0,0,1,1,0,0},{1,0,1,1,1,1,0,0,0,0,1,1,1,0,0,1,0,1,0,0,0,1,0,1,1,1,1,0,0,1,0,0,0,0,0,1,1,1,1,0,1,0,0,0,0,0,1,1,0},{0,1,0,0,1,0,1,0,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,1,1,0,1,0,0,0,1,1,0,1,0,1,1,0,0,1,1,0,1,0,0,0,0,0},{1,0,0,1,0,1,0,0,0,0,1,1,0,1,1,1,0,0,1,1,1,1,1,0,1,0,1,0,0,1,0,1,0,1,1,0,1,0,1,0,1,1,1,1,0,1,1,1,0},{0,1,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,1,1,0,1,0,0,1,0,0,0,1,0,0,1,0,1,0,1,0,1,0},{0,1,0,0,1,1,1,0,0,0,1,1,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,1,1,1,1,0,1,0,0,1,0,1,1,0,1,0,1,0,0},{0,1,0,0,1,0,0,0,0,1,0,1,1,1,0,0,0,1,1,0,0,1,1,1,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,0,0},{1,1,0,0,1,0,1,0,0,1,1,0,0,1,1,1,1,0,0,0,1,1,0,1,0,1,1,1,0,0,0,1,0,1,0,1,0,0,1,1,0,1,1,0,0,0,1,0,1},{0,0,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,1,1,0,1,1,1,1,1,0,1,0,1,0,0,0,1,1,1,0,1,0,0,0},{0,0,1,0,1,0,1,0,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,0,1,1,0,1,1,0,1,0,0,1,0,1,0,1,0,1,0,1,1,1,0,0,1,1,0},{0,1,0,1,1,1,0,0,1,0,1,1,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,1,0,1,0,0,0,1,0,1,0,0,1,0,0,1,1,0,0},{1,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,1,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,0,1,1,1,0,1,1,1,0,0,1,1,0},{1,0,0,0,1,0,0,1,1,1,0,0,1,1,1,1,0,0,0,1,1,0,0,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,1,0,0,0,1,1,0,1,0,0,0},{0,0,1,1,1,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,0,0,1,0,0,1,1,0,0,0,0,1,0,1,0,0,1,1,0,1,1,0,1,0,0,0,1,1,0},{0,0,1,1,0,0,0,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,1,1,0,1,0,1,1,1,1,1,1,1,0,1,0,0},{1,0,1,0,1,0,1,0,0,1,1,0,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,1,0,1,1,1,1,1,1,0,1,1,0,0,0,0,1,1,0,0},{1,0,1,0,0,0,1,0,1,0,0,1,0,0,0,1,0,0,0,0,1,0,0,1,0,1,1,0,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,0,1,0,0,1},{1,0,1,0,1,1,1,1,0,1,0,0,1,1,1,0,0,0,1,0,0,0,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0},{1,1,1,0,1,0,1,1,0,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,0,0,1,1,0,0,0,1,1},{1,0,1,1,0,1,0,0,1,1,1,1,0,0,0,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,1,0,1,1,0,1,0,1,0,0,1,0},{1,1,1,0,0,1,0,0,0,1,1,0,1,0,0,1,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,1,1,0,1,0,1,0,1,0,0,0,0,1},{0,1,1,1,0,1,0,1,1,0,1,1,1,1,0,1,0,1,0,1,1,0,0,1,1,1,1,0,1,0,0,0,0,0,0,1,0,1,1,1,0,1,0,1,1,1,1,1,0},{0,1,0,0,0,0,0,1,1,1,1,0,1,0,0,1,0,0,0,1,0,0,0,0,1,0,0,1,1,1,0,0,1,1,1,1,1,0,1,1,0,0,0,1,1,0,0,0,0},{1,1,0,0,1,0,1,1,0,0,0,1,1,0,1,0,0,0,0,1,0,1,1,1,1,1,1,0,0,1,1,1,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0},{0,1,1,0,0,0,0,0,1,1,0,0,0,1,1,1,1,0,1,1,0,0,0,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0},{0,1,1,1,0,0,1,1,1,1,0,1,1,1,1,0,1,1,0,0,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,1,0,1,0,1,0,0,1,0,0,1,1,1,0}};
    	System.out.println(largestIsland(grid));
    	int[][]grid1={{1,1,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,1,0,1,1,0,0,0,1,0,0,1,1,1,1,0,0,0,1,1,0,1,0,0,0},{1,0,0,0,1,1,0,1,1,0,0,1,0,0,0,0,1,0,1,0,1,1,0,1,0,0,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,0,0,1,1,1,1},{1,0,1,0,1,0,1,1,0,1,1,0,0,1,1,1,0,0,0,0,1,1,1,0,1,1,0,1,0,1,0,0,1,0,1,1,0,1,1,0,1,0,1,1,1,1,1,1,1},{1,1,0,0,1,1,1,0,0,0,0,0,1,0,1,1,0,1,0,0,1,0,0,1,0,1,0,0,0,1,1,1,0,0,1,1,0,1,1,0,0,0,0,1,0,1,0,1,1},{0,1,1,1,1,1,0,0,1,0,1,1,1,1,0,1,0,0,0,0,1,1,1,0,1,1,1,1,1,0,0,1,0,1,0,1,1,1,0,1,1,1,1,0,1,0,1,1,0},{0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,0,0,1,0,0,0,1,1,1,1,1,0,1,1,1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,1,0,1,1},{1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,0,1,1,0,1,0,1,1,0,0,0,1,1,0,0,1,0,1,0,0,0,0,0},{1,1,0,1,1,1,0,1,0,0,1,0,1,0,1,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,1,1,1,0,0,1,0,1,0,1,0,0,0,0,1,0,0,0,0},{1,0,1,0,0,1,1,0,1,0,0,1,1,1,0,0,0,1,1,1,0,1,0,0,0,1,1,0,1,0,1,0,0,1,0,1,1,1,0,0,1,0,1,1,0,1,1,1,1},{1,0,0,1,1,1,1,0,1,1,1,1,1,1,0,0,1,0,0,1,0,1,1,1,0,0,0,1,0,1,1,1,1,1,1,0,1,0,1,0,0,0,1,1,1,1,1,0,1},{0,0,1,1,1,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,0,0,1,1,0,1,0,1,1,0,0,1,0,0},{1,0,1,1,0,0,1,1,1,1,1,1,0,0,0,0,1,0,0,1,1,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,0,0,0,1,1,0,1,1,1,0,1,1,1},{0,0,0,1,1,1,1,0,1,1,0,0,0,1,1,1,1,0,0,1,0,0,0,1,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,0,0,0,0,0,1,1,1,1,1},{1,1,1,1,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,0,0,1,1,1,1,0,0,0,1,1,1,0,0,1,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1},{0,0,0,1,1,1,0,1,1,0,1,0,1,1,1,1,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,1,1,0,1,0,0,0,0,0,0,0},{1,0,0,0,0,0,0,0,1,0,0,1,0,1,1,0,1,1,0,0,1,1,1,0,0,0,1,1,1,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,1,1,0,0,0},{0,1,0,1,0,0,0,0,0,1,1,1,1,0,1,1,1,1,0,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,0},{1,0,0,0,0,0,0,1,0,1,0,1,0,1,1,0,1,1,1,1,0,1,1,0,0,0,1,0,1,1,0,1,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,0,1},{1,0,1,1,0,0,1,1,1,0,0,1,0,1,0,1,1,1,1,0,0,1,1,0,0,0,1,0,0,1,0,1,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,1,0},{1,1,1,1,0,1,1,0,0,0,1,0,1,1,0,1,0,0,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,1,0,0,0,1,1,0,1,0,1,0,1,1,0},{1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,0,0,1,1,0,0,1,1,0,1,1,0,0,1,0,0,0,0,1,0,1,1,0,0,0,1,1,1},{1,0,1,0,1,0,1,0,1,0,1,1,0,1,1,1,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,1,0,1,0,0,1,0,1,0,0,0,1,1,1,1,0,0},{0,0,1,1,1,0,0,1,0,1,0,1,1,1,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,1,0,1,1,0,0,1,0,1,1},{1,1,1,1,0,1,0,1,0,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,0,1,1,1,0,0,0,0,1,0,0,1,0,1,0,0,0,1,1,0,0},{1,0,1,1,1,1,0,0,0,0,1,1,1,0,0,1,0,1,0,0,0,1,0,1,1,1,1,0,0,1,0,0,0,0,0,1,1,1,1,0,1,0,0,0,0,0,1,1,0},{0,1,0,0,1,0,1,0,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,1,1,0,1,0,0,0,1,1,0,1,0,1,1,0,0,1,1,0,1,0,0,0,0,0},{1,0,0,1,0,1,0,0,0,0,1,1,0,1,1,1,0,0,1,1,1,1,1,0,1,0,1,0,0,1,0,1,0,1,1,0,1,0,1,0,1,1,1,1,0,1,1,1,0},{0,1,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,1,1,0,1,0,0,1,0,0,0,1,0,0,1,0,1,0,1,0,1,0},{0,1,0,0,1,1,1,0,0,0,1,1,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,1,1,1,1,0,1,0,0,1,0,1,1,0,1,0,1,0,0},{0,1,0,0,1,0,0,0,0,1,0,1,1,1,0,0,0,1,1,0,0,1,1,1,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,0,0},{1,1,0,0,1,0,1,0,0,1,1,0,0,1,1,1,1,0,0,0,1,1,0,1,0,1,1,1,0,0,0,1,0,1,0,1,0,0,1,1,0,1,1,0,0,0,1,0,1},{0,0,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,1,1,0,1,1,1,1,1,0,1,0,1,0,0,0,1,1,1,0,1,0,0,0},{0,0,1,0,1,0,1,0,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,0,1,1,0,1,1,0,1,0,0,1,0,1,0,1,0,1,0,1,1,1,0,0,1,1,0},{0,1,0,1,1,1,0,0,1,0,1,1,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,1,0,1,0,0,0,1,0,1,0,0,1,0,0,1,1,0,0},{1,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,1,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,0,1,1,1,0,1,1,1,0,0,1,1,0},{1,0,0,0,1,0,0,1,1,1,0,0,1,1,1,1,0,0,0,1,1,0,0,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,1,0,0,0,1,1,0,1,0,0,0},{0,0,1,1,1,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,0,0,1,0,0,1,1,0,0,0,0,1,0,1,0,0,1,1,0,1,1,0,1,0,0,0,1,1,0},{0,0,1,1,0,0,0,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,1,1,0,1,0,1,1,1,1,1,1,1,0,1,0,0},{1,0,1,0,1,0,1,0,0,1,1,0,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,1,0,1,1,1,1,1,1,0,1,1,0,0,0,0,1,1,0,0},{1,0,1,0,0,0,1,0,1,0,0,1,0,0,0,1,0,0,0,0,1,0,0,1,0,1,1,0,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,0,1,0,0,1},{1,0,1,0,1,1,1,1,0,1,0,0,1,1,1,0,0,0,1,0,0,0,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0},{1,1,1,0,1,0,1,1,0,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,0,0,1,1,0,0,0,1,1},{1,0,1,1,0,1,0,0,1,1,1,1,0,0,0,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,1,0,1,1,0,1,0,1,0,0,1,0},{1,1,1,0,0,1,0,0,0,1,1,0,1,0,0,1,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,1,1,0,1,0,1,0,1,0,0,0,0,1},{0,1,1,1,0,1,0,1,1,0,1,1,1,1,0,1,0,1,0,1,1,0,0,1,1,1,1,0,1,0,0,0,0,0,0,1,0,1,1,1,0,1,0,1,1,1,1,1,0},{0,1,0,0,0,0,0,1,1,1,1,0,1,0,0,1,0,0,0,1,0,0,0,0,1,0,0,1,1,1,0,0,1,1,1,1,1,0,1,1,0,0,0,1,1,0,0,0,0},{1,1,0,0,1,0,1,1,0,0,0,1,1,0,1,0,0,0,0,1,0,1,1,1,1,1,1,0,0,1,1,1,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0},{0,1,1,0,0,0,0,0,1,1,0,0,0,1,1,1,1,0,1,1,0,0,0,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0},{0,1,1,1,0,0,1,1,1,1,0,1,1,1,1,0,1,1,0,0,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,1,0,1,0,1,0,0,1,0,0,1,1,1,0}};
    	System.out.println(expand(grid1, 0,17));
    }
}
