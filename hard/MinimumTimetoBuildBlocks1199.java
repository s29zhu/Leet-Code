package leetcode.hard;

import java.util.Arrays;
import java.util.PriorityQueue;

/*
 * https://leetcode.com/problems/minimum-time-to-build-blocks/
 * You are given a list of blocks, where blocks[i] = t means that the i-th block needs t units of time to be built. 
 * A block can only be built by exactly one worker. A worker can either split into two workers (number of workers increases by one)
 * or build a block then go home. Both decisions cost some time. The time cost of splitting one worker into two workers is given as 
 * an integer split. Note that if two workers split at the same time, they split in parallel so the cost would be split. Output the
 * minimum time needed to build all blocks. Initially, there is only one worker.
 * Example 1:
 * Input: blocks = [1], split = 1
 * Output: 1
 * Explanation: We use 1 worker to build 1 block in 1 time unit.
 * 
 * Example 2:
 * Input: blocks = [1,2], split = 5
 * Output: 7
 * Explanation: We split the worker into 2 workers in 5 time units then assign each of them to a block so the cost is 5 + max(1, 2) = 7.
 * 
 * Example 3:
 * Input: blocks = [1,2,3], split = 1
 * Output: 4
 * Explanation: Split 1 worker into 2, then assign the first worker to the last block and split the second worker into 2.
 * Then, use the two unassigned workers to build the first two blocks. The cost is 1 + max(3, 1 + max(1, 2)) = 4.
 * 
 * Constraints:
 * 1 <= blocks.length <= 1000
 * 1 <= blocks[i] <= 10^5
 * 1 <= split <= 100
 */

public class MinimumTimetoBuildBlocks1199 {
	/*
	 * Analysis:
	 * 1. use priority queue, always pick the top two smallest elements to build
	 * Time complexity: nlogn,Initial queue sort is nlogn, later, dinsert an element is log(n), then insert n times, nlogn
	 * Space complexity:O(n)
	 */
    public static int minBuildTime(int[] blocks, int split) {
        PriorityQueue<Integer>pq=new PriorityQueue<>();
        for(int i:blocks)pq.add(i);//Every Element added to the queue will be sorted
        while(pq.size()>1){
            int x=pq.poll();
            int y=pq.poll();
            pq.add(Math.max(x,y)+split);
        }
        return pq.poll();
    }

	/*
	 * Analysis:
	 * 1. sort the blocks, and always pick the larger blocks to work on first
	 * 2. use dynamic programming, row means the number of people, column means the number of blocks
	 * Time complexity:O(n^3),
	 * Space complexity: O(n^2)
	 */
    public static int minBuildTimeI(int[] blocks, int split) {
        int min=0,l=blocks.length;
        Arrays.parallelSort(blocks);
        if(l==0) return min;
        int[][] dp=new int[l+1][l+1];
        for(int i=1;i<=l;i++) {
        	Arrays.fill(dp[i], Integer.MAX_VALUE);
        	dp[i][i]=blocks[i-1];        	
        }
        for(int i=1; i<=l ; i++) {// for each of the index in the blocks array
        	for(int j=i-1;j>0;j--) { // for number people
        		 if(j*2<=i) { //directly double people number
        			 dp[j][i]=Math.min(dp[j][i],dp[j*2][i]+split);
        		 }
        		 for(int k=1;k<j;k++) {//let some people work on the blocks and double the rest of the people
        			 if((k+(j-k)*2)==i) {
        				dp[j][i]=Math.min(dp[j][i], Math.max(dp[i][i], split+dp[(j-k)*2][(j-k)*2]));
        			 }else if((k+(j-k)*2)<i){
        				dp[j][i]=Math.min(dp[j][i], Math.max(dp[i][i], dp[j-k][i-1]));
        			 }
        		 }
        	}
        }
        return dp[1][l];	
    }
    public static void main(String args[]) {
    	int[] blocks= {78599,7790,65591,96754,25290,35777,64449,81318,90736,85195,96919,88450,53520,23081,36137,19264,55316,60860,22210,57092,81990,4960,76644,139,88648,53562,10786,62425,45351,19972,42473,25282,90298,55813,6891,66275,10955,78006,15258,64350,43213,7111,72714,63023,65665,41831,53687,24711,72630,39979,48863,31556,52613,4620,81789,49092,13385,40465,27417,42679,57210,13001,22426,99201,11176,80622,6411,44188,2162,75789,34861,92437,62979,77729,31526,13564,43934,25782,26710,68768,18886,64034,13572,1910,71876,3299,63077,56254,81935,6771,55380,35932,36058,23850,40529,24103,81713,632,53365,401,12769,35460,66020,83561,75795,92148,7398,17789,28131,74677,72834,63182,10870,65082,49498,75896,45500,98828,28234,85289,25289,76175,26196,4399,38232,62821,12619,82116,23238,89264,84627,60773,69943,10723,13521,97307,44681,63514,74112,38975,65184,64993,50029,47863,27293,21284,59195,23752,84002,28436,76645,40269,18914,72981,87809,10697,84392,60178,5524,33462,65952,58747,73775,16234,67972,96818,6276,76679,43171,49086,91227,40842,5464,47395,928,64195,39733,13079,96462,86510,25569,69685,18104,9924,92149,99109,36842,56013,50424,6225,69576,86183,86486,5058,36389,23235,61006,79169,23537,10348,71955,86955,70072,28516,45421,53982,15378,77542,71459,18978,99046,70241,26682,39848,45809,78947,4928,8469,74088,53567,82056,27831,23173,48046,49708,61356,96146,6351,77049,42200,43948,90083,85617,76024,17075,19775,55161,52178,1841,56009,42800,25096,64390,32398,86788,83773,74783,25142,82454,97204,88881,65463,50972,52695,8319,16944,55109,1704,53341,73644,65143,35815,36026,79895,10952,1047,96305,39309,80362,42033,2762,75807,18615,54820,52340,6884,11364,66327,92643,74468,24484,88451,46517,94747,7212,37188,4163,34412,71996,2737,21126,39024,76848,28550,99422,85401,33885,37021,6918,33246,68337,66778,76628,75769,28837,5527,31498,62551,97064,39468,41781,290,51542,85215,97405,12887,85650,7846,54797,2743,97823,98099,10978,68683,17060,22747,61103,54054,16647,72684,82794,43827,6730,70009,14656,15056,42142,36286,26482,48354,494,79817,77125,92017,34095,85662,98507,68952,42635,44357,21520,59657,99216,72033,86556,84360,29982,72,83733,29977,73910,69391,82785,14605,67006,16332,70897,74334,35443,53817,7557,82653,97671,35260,72481,17608,83265,73768,26348,47212,11599,34322,30645,97895,13224,97529,6885,16481,18260,29969,73620,63907,51638,28496,64715,74175,23438,74712,14715,1599,56052,82008,18723,64825,22469,96703,98456,6240,51906,87530,78003,97969,61336,8418,57353,93384,72269,52338,81812,22441,39994,27418,25697,13016,93012,96598,44602,81691,65911,8891,95827,70162,58913,97459,19782,4576,59272,37702,2814,50004,72422,41869,53509,56467,86333,88773,74665,54313,42160,17107,4781,62063,5360,67046,86916,24162,43225,50518,91575,10414,40973,37549,34193,3987,53223,38321,31607,10779,36315,49884,8194,23473,19078,87980,22837,96818,3517,56666,62956,68172,14878,78812,44934,43466,90096,70956,81858,38919,10114,13152,93688,49982,74886,62511,17198,98934,11214,40872,50751,27103,34432,14040,76025,80197,12990,32222,92487,86058,78455,10596,15578,92002,63460,37689,66992,9839,52857,49715,46684,60889,22693,69004,19883,74092,45418,57005,53138,84418,96959,24773,41503,28539,57344,49094,63122,24498,97031,85381,78551,31191,44604,90867,12768,3595,15019,92687,39743,56233,96703,26037,31776,76193,11279,84148,32869,74533,94029,91760,94377,16778,12383,97453,98672,55976,59811,74965,80082,71059,63046,56456,10861,34956,54772,92041,96825,92315,72365,18629,26691,10796,78234,44320,18597,78929,15138,25970,17226,3749,5439,51862,31063,76969,56861,65922,20407,36886,83184,280,1656,99387,61473,22835,74637,48075,47193,22067,26135,12315,29397,18619,16072,13872,16356,1879,97516,65179,71072,66880,82664,64944,91364,93817,12070,48982,361,4074,27295,67971,54945,97278,51405,349,14596,98648,88860,57349,30962,87555,85208,75846,48316,74135,6174,25803,99785,45699,57443,40347,42846,5184,99374,79286,36208,22213,16960,35159,14835,85264,4248,68210,73334,21676,82582,88522,67867,34920,23180,66333,50276,20355,18550,9579,75037,90314,96800,81718,37019,78721,2742,76105,54245,82756,26259,85783,48670,49508,6743,29619,55828,7169,30744,91580,10763,41148,66703,80462,13837,88482,1763,86091,22054,56954,91476,24542,76719,84856,94816,6547,4477,92714,4397,68481,57341,20833,94821,82021,69305,33686,42464,30057,32376,91706,53028,75402,64093,60440,70497,17345,86253,57867,25291,29932,40034,53593,52667,69248,63064,27230,32279,80540,61255,65864,44172,47491,97096,54532,42608,83810,7584,53875,75907,86295,24829,14460,42979,91789,97593,84057,44612,41303,48544,29639,1678,31396,14906,48195,39609,87627,2473,42984,72848,62906,2013,91092,94636,8159,8471,39924,22799,62566,2869,70612,21351,39118,12099,88904,40827,73154,62211,16979,81015,34772,67666,10870,27694,23712,42866,41710,67706,26857,53379,77706,20937,44417,72946,30527,46560,52702,78298,9744,65507,85975,53858,49198,18189,82355,38220,2136,16337,61238,98786,96763,36546,56081,36746,86841,8679,50997,81232,50804,67293,35761,29593,57878,66050,54114,22679,94239,293,8625,6410,66210,79083,26279,60485,29334,36133,54653,42859,28035,4094,90333,65289,88010,96880,11301,4263,19875,95768,46010,63782,51521,37200,32531,3162,15149,28166,80463,67555,15457,18483,70918,79846,82755,51651,38032,90452,19341,94465,4850,20647,3766,45232,54323,18887,83274,82115,67420,53912,98878,50615,31454,18403,85501,44243,7637,95219,54543,18006,8303,4370,57120,92310,71128,45396,28479,35006,48402,63155,28241,61395,96815,83137,83733,63667,23648,64175,78903,91586,4075,49499,52178,46580,8223,68166,25091,33732,8071,310,9232,68906,81763,87251,91334,69205,51341,90665,54347,63546,73205,88906,37332,90451,12299,26441,76501,41556,95010,44281,29800,5925,15018,19234,74239,74881,30656,36692,37783,95921,34363,54151,29152,50232,39204,31026,95265,30998,54043,70680,83132,13678,34030,63607,96311,33711,36323,62490,21199,57527,52081,1538,34023,819,43320,82315,18575,15147,30241,14181,86096,48110,66607,7245,89908,5253,55114,18925,73805,9832,86788};
    	//			   1,7,12
    	int split=70;
    	//[1,2,3,7], 1
    	//[1,2,7,10],5 
    	System.out.println(blocks.length);
    	System.out.print(minBuildTime(blocks, split));
    }
}
